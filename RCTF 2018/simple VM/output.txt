0x30: global = 0x100
0x35: global +=1
0x36: cond = rbp(global)
0x37: putchar(cond)
0x38: rbp[0x100] ? jmp 0x35 and --
Nop
==>putchar(Input Flag:)

0x42: global = 0x110
0x47: global +=1		//global=0x111
0x48: cond = getchar()		//get input
Nop		

0x4a: [global] = cond		//input stored in [0x111]
0x4b: rbp[0x110] ? jmp 0x47 and --	//rbp[0x110]=31 -->check =32 if not jmp to 0x47  -->input_size=32
Nop

//Do some bit operations
0x55: cond = rbp[0x140]			//cond=32       
0x5a: global = cond			//global=32
0x5b: cond += 0xf1			//cond =32 +0xf1 =273=0x111 -->cond point to input address
0x60: cond = rbp(cond)			//cond =[0x111] (input)
0x61: rbp[0x143] = rbp(cond)		//[0x143]= [0x111] =input[i]
0x66: cond = ~(global & cond)		//X = ~(32 & input[i])
0x67: rbp[0x141] = rbp(cond)		//[0x141] = X
0x6c: global = cond			//global =X
0x6d: cond = rbp[0x140]			//cond=32
0x72: cond = ~(global & cond)		//Y= ~(X & 32)
0x73: rbp[0x142] = rbp(cond)		//[0x142]= Y
0x78: cond = rbp[0x141]			//cond =[0x141]= X
0x7d: cond = rbp[0x143]			//cond =[0x143]= input[i]
0x82: cond = ~(global & cond)		//Z= ~(X & input[i])
0x83: global = cond			//global =Z
0x84: cond = rbp[0x142]			//cond [0x142]=Y
0x89: cond = ~(global & cond)		//T= ~(Z & Y)
0x8a: rbp[0x144] = rbp(cond)		//[0x144]= T
Nop

0x90: cond = rbp[0x140]			//cond =32
0x95: cond += 0xf1			//cond =32 + 0xf1 = 0x111
0x9a: global = cond			//global =cond =0x111
0x9b: cond = rbp[0x144]			//cond = [0x144] =T
0xa0: [global] = cond			//[0x111] =[0x144]     -->save input[i] after operation at [0x144] to [0x111]
0xa1: global = rbp[0x140]		//global =[0x140]=32
0xa6: global +=1			//global +=1	       -->next char
0xa7: rbp[0x140] = global		//[0x140]= global
0xac: rbp[0x145] ? jmp 0x55 and --	// --> if not enough 32 char jmp to 0x55
Nop

0xb6: cond = rbp[0x146]			//cond =[0x146] =31
0xbb: cond += 0x5			//cond +=[5]
0xc0: cond = rbp(cond)			//--> take 32 number from 5th in opcode array
0xc1: global = cond			//global =5[i]
0xc2: cond = rbp[0x146]			//cond =[0x146] =31
0xc7: cond += 0x111			//cond +=[0x111]
0xcc: cond = rbp(cond)			//--> take 32 number from [0x111](after operations)			
0xcd: cond -= global			//-->check  5[i] and 0x111[i] eq or not
0xce: cond ? jmp 0x160			//if not, fail
0xd3: rbp[0x146] ? jmp 0xb6 and --	//if eq, i--
0xdc: jmp 0x176				//if eq full 32 char, success
Nop

0xe2: return 0x0
0xe7: return 0x0
0xec: return 0x0
0xf1: return 0x0
0xf6: return 0x0
0xfb: return 0x0
0x100: cond = getchar()
Nop
Nop
Nop
Nop
Nop
Nop
Nop
Nop
Nop
Nop
Nop
0x10c: return 0x1f0f0000
0x111: return 0x0
0x116: return 0x0
0x11b: return 0x0
0x120: return 0x0
0x125: return 0x0
0x12a: return 0x0
0x12f: return 0x0
0x134: return 0x0
0x139: return 0x0
0x13e: return 0x2000
0x143: return 0x1f1f00
0x148: return 0x0
0x14d: return 0x57050000
Nop
Nop
Nop
Nop
0x156: cond = getchar()
Nop
Nop
Nop
Nop
Nop
0x15c: cond = getchar()
0x15d: return 0x50150000
0x162: jmp 0x120e0000
0x167: putchar(cond)
0x168: rbp[0x150] ? jmp 0x165 and --
0x171: return 0x0
0x176: global = 0x156			//global =0x156
0x17b: global +=1			//global+=1
0x17c: cond = rbp(global)		//--->take char in opcode[0x156:] (Right)
0x17d: putchar(cond)			//putchar(Right)			
0x17e: rbp[0x150] ? jmp 0x17b and --
0x187: return 0x0


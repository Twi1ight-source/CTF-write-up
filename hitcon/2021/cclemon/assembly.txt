0: const 26 ; <module 'src'> 
5: module 15 833
11: const 27 ; 68694329 
16: store 0 0				#var_0= 68694329 
19: const 28 ; w 
24: define 0 0 0 0 59			#def w():
33: load 1 0				#var_1 =var_0
36: const 29 ; 1259409 
41: mul					#var_1 *= 1259409 
42: const 30 ; 321625345 
47: add					#var_1+=321625345 
48: const 31 ; 4294967296 
53: mod					#var_1 %=4294967296 
54: dup
55: store 1 0				#var_0 =var_1
58: return				#return var_0
59: store 0 1				#var_1=var_0
62: const 32 ; n 
67: const 33 ; __init__
72: define 0 0 1 2 157			#def __init__(n):	
81: array 0
86: self
87: const 34 ; a 	
92: setattr				#self.a=[]
93: const 35 ; 0 
98: store 0 1				#var_1=0
101: load 0 1				#var_1
104: load 0 0				#n
107: lt					#while var_1 < n
108: jz 151
113: self
114: const 34 ; a 
119: getattr
120: const 36 ; append 
125: getattr				#self.a.append
126: load 1 1				#	
129: call 0				#w()
131: call 1				#self.a.append(w())
133: pop
134: load 0 1				#var_1
137: const 37 ; 1 
142: add				
143: store 0 1				#var_1+=1
146: jmp 101
151: const 38 ; nil 
156: return				#return nil
157: const 33 ; __init__ 
162: const 39 ; x 
167: const 40 ; y 
172: const 41 ; r 
177: define 0 0 2 2 277			#def r(x,y):
186: load 0 0
189: load 0 1
192: gt						#if x>y:
193: jz 214
198: self
199: const 41 ; r 
204: getattr					#self.r		
205: load 0 0					#x
208: load 0 1					#y
211: tailcall 2
213: return						#return self.r(y,x)		
214: load 0 0
217: load 0 1
220: lt						#while x<y:
221: jz 271
226: self
227: const 42 ; s 
232: getattr					#self.s		
233: load 0 1					#y
236: load 0 0					#x
239: call 2						#self.s(x,y)
241: pop
242: load 0 0
245: const 37 ; 1 
250: add						
251: store 0 0						#x+=1
254: load 0 1
257: const 37 ; 1 
262: sub				
263: store 0 1						#y-=1
266: jmp 214
271: const 38 ; nil 
276: return					#return nil
277: const 41 ; r 
282: const 39 ; x 
287: const 40 ; y 
292: const 42 ; s 
297: define 0 0 2 3 362			#def s(x,y)
306: self
307: const 34 ; a 
312: getattr				
313: load 0 0				
316: getitem				
317: store 0 2					#var_2 = self.a[x]
320: self
321: const 34 ; a 
326: getattr				
327: load 0 1				
330: getitem				#self.a[y]
331: self
332: const 34 ; a 
337: getattr
338: load 0 0
341: setitem					#self.a[x]= sel.a[y]
342: load 0 2				#var_2
345: self
346: const 34 ; a 
351: getattr				
352: load 0 1
355: setitem					#self.a[y]=var_2
356: const 38 ; nil 
361: return					return nil
362: const 42 ; s 
367: const 39 ; x 
372: const 40 ; y 
377: const 43 ; val 
382: const 44 ; o 
387: define 0 0 3 4 494			#def o(x,y, val)
396: load 0 0		
399: load 0 1
402: gt					#if x>y:
403: jz 427
408: self
409: const 44 ; o 
414: getattr
415: load 0 2				#val
418: load 0 0				#x
421: load 0 1				#y
424: tailcall 3
426: return					#return self.o(y,x,val)
427: load 0 0
430: store 0 3				#var_3=x
433: load 0 3				#var_3
436: load 0 1				#y			
439: le					#while var_3<=y				
440: jz 488
445: self
446: const 34 ; a 
451: getattr
452: load 0 3
455: getitem					#self.a[var_3]
456: load 0 2					#val
459: bxor					#self.a[var_3] ^= val
460: self
461: const 34 ; a 
466: getattr
467: load 0 3					#var_3
470: setitem					#self.a=var_3
471: load 0 3
474: const 37 ; 1 
479: add
480: store 0 3					#var_3+=1
483: jmp 433
488: const 38 ; nil 
493: return
494: const 44 ; o 
499: const 45 ; A 
504: class 8 0					#class A
507: store 0 2					#var_2 =A
510: const 46 ; 200000 
515: store 0 7					#var_7=200000
518: load 0 2
521: load 0 7
524: call 1					#A(N)
526: store 0 8					#var_8 =A(N)
529: const 35 ; 0 
534: store 0 9
537: load 0 9					#var_9=0
540: load 0 7					#var_7
543: const 47 ; 5 
548: mul					#var_7*5
549: lt						#while var_9 < var_7*5:
550: jz 727
555: load 0 1						
558: call 0						#w()
560: const 48 ; 3 
565: mod						
566: store 0 10						#var_10= w()%3
569: load 0 1
572: call 0
574: load 0 7						#var_7
577: mod
578: store 0 11						#var_11= w()% var_7
581: load 0 1
584: call 0
586: load 0 7
589: mod
590: store 0 12						#var_12= w()% var_7
593: load 0 10
596: const 35 ; 0 
601: eq
602: jz 630						#if var_12 ==0:
607: load 0 8
610: const 41 ; r 
615: getattr							#A(N).r
616: load 0 12
619: load 0 11
622: call 2							#A(N).r(var_11, var_12)
624: pop
625: jmp 710							#jmp 710
630: load 0 10
633: const 37 ; 1 					
638: eq
639: jz 667						#if var_12 ==1:
644: load 0 8
647: const 42 ; s 
652: getattr							#A(N).s
653: load 0 12
656: load 0 11
659: call 2							#A(N).s(var_11, var_12)
661: pop
662: jmp 710							#jmp 710
667: load 0 10
670: const 49 ; 2 
675: eq							#if var_12 ==2:
676: jz 710
681: load 0 1							#
684: call 0							#w()
686: store 0 13							#var_13 =w()
689: load 0 8							#A(N)
692: const 44 ; o 
697: getattr							#A(N).o
698: load 0 13
701: load 0 12
704: load 0 11
707: call 3							#A(N).o( var_11, var_12, w())
709: pop
710: load 0 9
713: const 37 ; 1 
718: add
719: store 0 9						#var_9 +=1
722: jmp 537
727: const 35 ; 0 
732: store 0 14				#var_14=0
735: const 35 ; 0 
740: store 0 9				#var_9 =0
743: load 0 9
746: load 0 7
749: lt					#while var_9 < 200000:
750: jz 802
755: load 0 14					#var_14
758: load 0 8
761: const 34 ; a 				#A(N).a
766: getattr
767: load 0 9								
770: getitem					#A(N).a[var_9]
771: load 0 9
774: const 37 ; 1 
779: add					#var_9+1
780: mul					#A(N).a[var_9]*(var_9+1)
781: add					
782: store 0 14					#var_14 +=A(N).a[var_9]*(var_9+1)
785: load 0 9		
788: const 37 ; 1 
793: add
794: store 0 9					#var_9+=1
797: jmp 743
802: const 23 ; <function 'print'> 
807: const 50 ; hitcon{ 
812: load 0 14		
815: const 51 ; __string__ 
820: getattr					#var_14.__string__ 
821: call 0					#var_14.__string__()
823: add
824: const 52 ; } 
829: add					#var_14.__string__() + '}'
830: call 1					#print('hitcon{'+ var_14.__string__() + '}')
832: pop
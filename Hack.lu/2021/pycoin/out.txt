  1:           0 JUMP_FORWARD         (to 4)
               2 LOAD_GLOBAL          (99)
         >>    4 LOAD_CONST           (0)
               6 LOAD_CONST           (('md5',))
               8 IMPORT_NAME          (hashlib)
              10 IMPORT_FROM          (md5)

  3:          12 STORE_NAME           (md5)
              14 POP_TOP
              16 LOAD_NAME            (str)
              18 LOAD_NAME            (input)
              20 LOAD_CONST           ('please supply a valid key:')
              22 CALL_FUNCTION        1
              24 CALL_FUNCTION        1
              26 LOAD_METHOD          (encode)

  6:          28 CALL_METHOD          0
              30 STORE_NAME           (k)
              32 LOAD_NAME            (len)
              34 LOAD_NAME            (k)
              36 CALL_FUNCTION        1
              38 LOAD_CONST           (16)
              40 COMPARE_OP           (==)

  7:          42 EXTENDED_ARG         (256)
              44 JUMP_IF_FALSE_OR_POP (to 462)
              46 LOAD_NAME            (k)
              48 LOAD_CONST           (0)
              50 BINARY_SUBSCR

  6:          52 LOAD_CONST           (102)
              54 COMPARE_OP           (==)

  8:          56 EXTENDED_ARG         (256)
              58 JUMP_IF_FALSE_OR_POP (to 462)
              60 LOAD_NAME            (k)
              62 LOAD_CONST           (1)
              64 BINARY_SUBSCR
              66 LOAD_NAME            (k)
              68 LOAD_CONST           (0)
              70 BINARY_SUBSCR
              72 LOAD_CONST           (6)

  6:          74 BINARY_ADD
              76 COMPARE_OP           (==)

  9:          78 EXTENDED_ARG         (256)
              80 JUMP_IF_FALSE_OR_POP (to 462)
              82 LOAD_NAME            (k)
              84 LOAD_CONST           (2)
              86 BINARY_SUBSCR
              88 LOAD_NAME            (k)
              90 LOAD_CONST           (1)
              92 BINARY_SUBSCR
              94 LOAD_NAME            (k)
              96 LOAD_CONST           (0)
              98 BINARY_SUBSCR
             100 BINARY_SUBTRACT
             102 LOAD_CONST           (91)

  6:         104 JUMP_FORWARD         (to 116)
             106 FOR_ITER             (to 110)

 10:         108 JUMP_FORWARD         (to 112)
         >>  110 JUMP_FORWARD         (to 114)
         >>  112 POP_JUMP_IF_FALSE    (to 4)
         >>  114 JUMP_ABSOLUTE        (to 4)
         >>  116 BINARY_ADD

  6:         118 COMPARE_OP           (==)
             120 EXTENDED_ARG         (256)

 11:         122 JUMP_IF_FALSE_OR_POP (to 462)
             124 LOAD_NAME            (k)
             126 LOAD_CONST           (3)
             128 BINARY_SUBSCR
             130 LOAD_CONST           (103)
             132 COMPARE_OP           (==)
             134 EXTENDED_ARG         (256)
             136 JUMP_IF_FALSE_OR_POP (to 462)
             138 LOAD_NAME            (k)
             140 LOAD_CONST           (4)
             142 BINARY_SUBSCR

  6:         144 LOAD_NAME            (k)
             146 LOAD_CONST           (11)

 12:         148 BINARY_SUBSCR
             150 LOAD_CONST           (3)
             152 BINARY_MULTIPLY
             154 LOAD_CONST           (42)
             156 BINARY_SUBTRACT
             158 COMPARE_OP           (==)
             160 EXTENDED_ARG         (256)
             162 JUMP_IF_FALSE_OR_POP (to 462)
             164 LOAD_NAME            (k)

  6:         166 LOAD_CONST           (5)
             168 BINARY_SUBSCR

 13:         170 LOAD_NAME            (sum)
             172 LOAD_NAME            (k)
             174 CALL_FUNCTION        1
             176 LOAD_CONST           (1322)
             178 BINARY_SUBTRACT
             180 COMPARE_OP           (==)
             182 EXTENDED_ARG         (256)
             184 JUMP_IF_FALSE_OR_POP (to 462)
             186 LOAD_NAME            (k)
             188 LOAD_CONST           (6)
             190 BINARY_SUBSCR
             192 LOAD_NAME            (k)
             194 LOAD_CONST           (7)

  6:         196 BINARY_SUBSCR
             198 BINARY_ADD

 14:         200 LOAD_NAME            (k)
             202 LOAD_CONST           (10)
             204 BINARY_SUBSCR
             206 BINARY_ADD
             208 LOAD_CONST           (260)
             210 COMPARE_OP           (==)
             212 EXTENDED_ARG         (256)
             214 JUMP_IF_FALSE_OR_POP (to 462)
             216 LOAD_NAME            (int)
             218 LOAD_NAME            (chr)
             220 LOAD_NAME            (k)
             222 LOAD_CONST           (7)
             224 BINARY_SUBSCR			#k[7]
             226 CALL_FUNCTION        1		#chr(k[7])
             228 LOAD_CONST           (2)

  6:         230 BINARY_MULTIPLY		#k[7] *2
             232 CALL_FUNCTION        1		#int (chr(k[7]) *2)

 15:         234 LOAD_CONST           (1)
             236 BINARY_ADD			#k[7]*2 +1
             238 LOAD_NAME            (k)
             240 LOAD_CONST           (9)
             242 BINARY_SUBSCR			#k[9]	
             244 COMPARE_OP           (==)
             246 EXTENDED_ARG         (256)

  6:         248 JUMP_IF_FALSE_OR_POP (to 462)
             250 LOAD_NAME            (k)

 16:         252 LOAD_CONST           (8)
             254 BINARY_SUBSCR
             256 LOAD_CONST           (17)
             258 BINARY_MODULO
             260 LOAD_CONST           (16)
             262 COMPARE_OP           (==)
             264 EXTENDED_ARG         (256)
             266 JUMP_IF_FALSE_OR_POP (to 462)
             268 LOAD_NAME            (k)

  6:         270 LOAD_CONST           (9)
             272 BINARY_SUBSCR

 17:         274 LOAD_NAME            (k)
             276 LOAD_CONST           (8)
             278 BINARY_SUBSCR
             280 LOAD_CONST           (2)
             282 BINARY_MULTIPLY
             284 COMPARE_OP           (==)
             286 EXTENDED_ARG         (256)
             288 JUMP_IF_FALSE_OR_POP (to 462)
             290 LOAD_NAME            (md5)
             292 LOAD_NAME            (k)
             294 LOAD_CONST           (10)
             296 BINARY_SUBSCR				#k[10]
             298 LOAD_CONST           (b'a')
             300 BINARY_MULTIPLY			#k[10]*a
             302 CALL_FUNCTION        1			#md5(k[10] *a)
             304 LOAD_METHOD          (digest)
             306 CALL_METHOD          0			#md5(k[10] *a).digest()

  6:         308 LOAD_CONST           (0)
             310 BINARY_SUBSCR				#md5(k[10] *a).digest()[0]

 18:         312 LOAD_CONST           (1)
             314 BINARY_SUBTRACT			##md5(k[10] *a).digest()[0] -1
             316 LOAD_NAME            (k)
             318 LOAD_CONST           (3)
             320 BINARY_SUBSCR				#k[3]

  6:         322 COMPARE_OP           (==)		#k[3]= md5(k[10] *a).digest()[0] -1
             324 ROT_TWO

 19:         326 ROT_TWO
             328 EXTENDED_ARG         (256)
             330 JUMP_IF_FALSE_OR_POP (to 462)
             332 LOAD_NAME            (k)
             334 LOAD_CONST           (11)
             336 BINARY_SUBSCR
             338 LOAD_CONST           (55)
             340 COMPARE_OP           (==)
             342 EXTENDED_ARG         (256)
             344 JUMP_IF_FALSE_OR_POP (to 462)
             346 LOAD_NAME            (k)

  6:         348 LOAD_CONST           (12)
             350 BINARY_SUBSCR

 20:         352 LOAD_NAME            (k)
             354 LOAD_CONST           (14)
             356 BINARY_SUBSCR
             358 LOAD_CONST           (2)
             360 BINARY_TRUE_DIVIDE			#k[14] / 2
             362 LOAD_CONST           (2)
             364 BINARY_SUBTRACT			#k[14] / 2 -2
             366 COMPARE_OP           (==)
             368 EXTENDED_ARG         (256)
             370 JUMP_IF_FALSE_OR_POP (to 462)
             372 LOAD_NAME            (k)
             374 LOAD_CONST           (13)
             376 BINARY_SUBSCR
             378 LOAD_NAME            (k)
             380 LOAD_CONST           (10)
             382 BINARY_SUBSCR
             384 LOAD_NAME            (k)

  6:         386 LOAD_CONST           (8)
             388 BINARY_SUBSCR

 21:         390 BINARY_MULTIPLY			#k[10]*k[8]
             392 LOAD_CONST           (32)
             394 BINARY_MODULO				#(k[10]*k[8]) %32
             396 LOAD_CONST           (2)
             398 BINARY_MULTIPLY			##(k[10]*k[8]) %32 *2
             400 LOAD_CONST           (1)
             402 BINARY_SUBTRACT			#(k[10]*k[8]) %32 *2 -1
             404 COMPARE_OP           (==)		#k[13]= ((k[10]*k[8]) %32) *2 -1
             406 EXTENDED_ARG         (256)
             408 JUMP_IF_FALSE_OR_POP (to 462)
             410 LOAD_NAME            (k)
             412 LOAD_CONST           (14)
             414 BINARY_SUBSCR
             416 LOAD_NAME            (k)
             418 LOAD_CONST           (12)
             420 BINARY_SUBSCR
             422 LOAD_NAME            (k)
             424 LOAD_CONST           (9)
             426 BINARY_SUBSCR

  6:         428 BINARY_XOR				#k[12] ^k[9]
             430 LOAD_NAME            (k)

 22:         432 LOAD_CONST           (15)
             434 BINARY_SUBSCR
             436 BINARY_XOR				#k[12] ^k[9] ^ k[15]
             438 LOAD_CONST           (3)
             440 BINARY_MULTIPLY			#(k[12] ^k[9] ^ k[15]) *3

  4:         442 LOAD_CONST           (23)

 25:         444 BINARY_SUBTRACT			#(k[12] ^k[9] ^ k[15]) *3 -23
             446 COMPARE_OP           (==)		#k[14]=(k[12] ^k[9] ^ k[15]) *3 -23
             448 EXTENDED_ARG         (256)	
             450 JUMP_IF_FALSE_OR_POP (to 462)
             452 LOAD_NAME            (k)
             454 LOAD_CONST           (15)
             456 BINARY_SUBSCR
             458 LOAD_CONST           (125)
             460 COMPARE_OP           (==)
         >>  462 STORE_NAME           (correct)
             464 LOAD_NAME            (print)
             466 LOAD_NAME            (correct)
             468 EXTENDED_ARG         (256)
             470 POP_JUMP_IF_FALSE    (to 486)
             472 LOAD_CONST           ('valid key! ')
             474 LOAD_NAME            (k)
             476 LOAD_METHOD          (decode)
             478 CALL_METHOD          0
             480 FORMAT_VALUE         0
             482 BUILD_STRING         2
             484 JUMP_FORWARD         (to 488)
         >>  486 LOAD_CONST           ('invalid key :(')
         >>  488 CALL_FUNCTION        1
             490 POP_TOP
             492 LOAD_CONST           (None)
             494 RETURN_VALUE


from hashlib import md5
k=[0]*20
k[0]=102            #'f'
k[1]=k[0]+6         #'l'
k[2]= k[1]-k[0]+91  #'a'
k[3]=103            #'g'
k[4]=k[11]*3-42     #k[4]= '{' , k[11] = '7'
k[6]+k[7]+k[10]=260
k[5]=sum(k) -1322
k[9]= int (chr(k[7]) *2) +1
k[8]%17 =16         #
k[9] =k[8]*2
k[3]= md5(k[10] *b'a').digest()[0] -1       #k[10]='e'
k[11]=55            #k[11]='7'
k[12]=k[14] / 2 -2
k[13]= ((k[10]*k[8]) %32) *2 -1
k[14]=(k[12] ^k[9] ^ k[15]) *3 -23
k[15]=125    #k[15]='}'

#flag{}
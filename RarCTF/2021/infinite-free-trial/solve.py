arr=[0xD6,0xD4,0x4D,0x46,0x53,0xCD,0x3E,0xC7,0x41,0x6D,0x50,0x8A,0x22,0xBF,0x2C,0x8E,0x09,0x9C,0x01,0x55,0x10,0x35,0xF4,0xC5,0x6B,0x68,0xD8,0x4F,0xD5,0x15,0x13,0xA8,0x08,0xD3,0x42,0x32,0x54,0x06,0x94,0xA1,0xE0,0xFB,0xAD,0xFF,0x5F,0x9E,0x31,0x82,0x02,0xCA,0x1E,0xF2,0x4A,0xD7,0xE2,0x47,0x48,0x66,0x80,0x14,0x67,0xDA,0x27,0x2D,0x62,0xE8,0x40,0x11,0x23,0x21,0x84,0x81,0x74,0x17,0xBE,0xCE,0x9B,0x92,0xB5,0x0E,0xC6,0xF0,0x99,0xF7,0xA6,0xDF,0x3A,0x76,0xDD,0x7C,0xD1,0xF6,0xA9,0xE9,0xB7,0x07,0x97,0x7A,0xC2,0x7E,0x90,0xB3,0x4C,0x30,0x5D,0xFD,0x45,0x85,0xA3,0x75,0xE3,0xF3,0x49,0xBD,0x0D,0x38,0xB4,0x8B,0xB9,0xFA,0xAA,0x59,0xB2,0x2B,0x6A,0xCF,0x0B,0xE6,0x05,0x63,0x3C,0xBC,0xE5,0x87,0x79,0x88,0xA5,0x03,0x34,0x43,0xEF,0x1D,0x7D,0x89,0xF1,0x58,0x33,0xB1,0x78,0x83,0x95,0x7F,0xDB,0x7B,0xB6,0xF5,0x1B,0x2F,0xBA,0x37,0x8D,0x18,0x12,0xD0,0x73,0xE7,0x3F,0x70,0xA7,0x0C,0x0A,0x64,0x9F,0x71,0x6C,0xAE,0x28,0xEB,0x96,0xB8,0xA2,0x19,0x8F,0x86,0xD9,0x0F,0xDC,0xC9,0xF9,0x39,0x5E,0xAB,0x51,0xCB,0xC1,0x25,0x20,0x65,0x44,0xEE,0x5C,0x3B,0xA4,0x1F,0xCC,0xAF,0x29,0xC8,0x2A,0x60,0xAC,0x61,0x5A,0xF8,0x5B,0x4B,0x93,0xEC,0x8C,0x9D,0xA0,0xC3,0xDE,0x98,0xBB,0x36,0xE4,0xEA,0x72,0x00,0x3D,0xB0,0x24,0x4E,0x77,0x6F,0x52,0xFE,0xC0,0x1A,0x91,0x69,0x56,0x2E,0x9A,0x16,0xFC,0x04,0xE1,0x26,0x1C,0x57,0xED,0xD2,0x6E,0xC4]
arr1=[0x09,0x16,0x17,0x0F,0x17,0x56,0x16,0x44,0x3A,0x18,0x53,0x6F,0x14,0x03,0x2A,0x06,0x6F,0x31,0x1C,0x47,0x2A,0x06,0x2D,0x5F,0x51,0x1B,0x00,0x46,0x4A,0x00,0x04,0x55,0x66,0x50,0x01,0x4C]

key='w1nR4rs'
key_1=[]

for i in key:
    for j in range(len(arr)):
        if arr[j]==ord(i):
            key_1.append(j)


from z3 import *
s=Solver()
flag=[BitVec(f'{i}',32) for i in range(7*6)]


for c in flag:
    s.add(c>0x20)
    s.add(c<0x7f)

def crc8(a1,a2):
    global flag
    v3 = 0
    while a2:
        v3 ^= (flag[a1] << 8)
        for j in range(8,0,-1):
            v3= If ( (v3 & 0x8000) != 0,v3 ^ 0x8380,v3 )
            v3 *= 2
        a2-=1
        a1+=1
    return v3 >> 8

buf=[0]*36
def xor_block(a1,a2,a3):
    global buf
    global flag
    for i in range(6):
        buf[a3]=flag[a1] ^ flag[a2]
        a3+=1
        a2+=1
        a1+=1

for i in range(6):
    xor_block(6*i, 6*(i+1), 6*i)

for n in range(7):
    s.add(crc8(n*6,6)==key_1[n])

for m in range(36):
    s.add(buf[m] == arr1[m])

s.add(flag[0]==ord('r'))
s.add(flag[1]==ord('a'))
s.add(flag[2]==ord('r'))
s.add(flag[3]==ord('c'))
s.add(flag[4]==ord('t'))
s.add(flag[5]==ord('f'))

print(s.check())
if s.check()==sat:
    m=s.model()
    for i in range(len(flag)):
        print(chr(m[flag[i]].as_long()),end="")

from z3 import * 
s=Solver()

mem=[BitVec(f'{i}',32) for i in range(64)]

for c in mem:
    s.add(c>=0,c<=80)

s.add(mem[0] - mem[1] !=0)
s.add(mem[0] - mem[8] !=0)
s.add(mem[0] - mem[2] !=0)
s.add(mem[0] - mem[16] !=0)
s.add(mem[1] - mem[2] !=0)
s.add(mem[8] - mem[16] !=0)
s.add(mem[0] - mem[3] !=0)
s.add(mem[0] - mem[24] !=0)
s.add(mem[1] - mem[3] !=0)
s.add(mem[8] - mem[24] !=0)
s.add(mem[2] - mem[3] !=0)
s.add(mem[16] - mem[24] !=0)
s.add(mem[0] - mem[4] !=0)
s.add(mem[0] - mem[32] !=0)
s.add(mem[1] - mem[4] !=0)
s.add(mem[8] - mem[32] !=0)
s.add(mem[2] - mem[4] !=0)
s.add(mem[16] - mem[32] !=0)
s.add(mem[3] - mem[4] !=0)
s.add(mem[24] - mem[32] !=0)
s.add(mem[0] - mem[5] !=0)
s.add(mem[0] - mem[40] !=0)
s.add(mem[1] - mem[5] !=0)
s.add(mem[8] - mem[40] !=0)
s.add(mem[2] - mem[5] !=0)
s.add(mem[16] - mem[40] !=0)
s.add(mem[3] - mem[5] !=0)
s.add(mem[24] - mem[40] !=0)
s.add(mem[4] - mem[5] !=0)
s.add(mem[32] - mem[40] !=0)
s.add(mem[0] - mem[6] !=0)
s.add(mem[0] - mem[48] !=0)
s.add(mem[1] - mem[6] !=0)
s.add(mem[8] - mem[48] !=0)
s.add(mem[2] - mem[6] !=0)
s.add(mem[16] - mem[48] !=0)
s.add(mem[3] - mem[6] !=0)
s.add(mem[24] - mem[48] !=0)
s.add(mem[4] - mem[6] !=0)
s.add(mem[32] - mem[48] !=0)
s.add(mem[5] - mem[6] !=0)
s.add(mem[40] - mem[48] !=0)
s.add(mem[0] - mem[7] !=0)
s.add(mem[0] - mem[56] !=0)
s.add(mem[1] - mem[7] !=0)
s.add(mem[8] - mem[56] !=0)
s.add(mem[2] - mem[7] !=0)
s.add(mem[16] - mem[56] !=0)
s.add(mem[3] - mem[7] !=0)
s.add(mem[24] - mem[56] !=0)
s.add(mem[4] - mem[7] !=0)
s.add(mem[32] - mem[56] !=0)
s.add(mem[5] - mem[7] !=0)
s.add(mem[40] - mem[56] !=0)
s.add(mem[6] - mem[7] !=0)
s.add(mem[48] - mem[56] !=0)
s.add(mem[8] - mem[9] !=0)
s.add(mem[1] - mem[9] !=0)
s.add(mem[8] - mem[10] !=0)
s.add(mem[1] - mem[17] !=0)
s.add(mem[9] - mem[10] !=0)
s.add(mem[9] - mem[17] !=0)
s.add(mem[8] - mem[11] !=0)
s.add(mem[1] - mem[25] !=0)
s.add(mem[9] - mem[11] !=0)
s.add(mem[9] - mem[25] !=0)
s.add(mem[10] - mem[11] !=0)
s.add(mem[17] - mem[25] !=0)
s.add(mem[8] - mem[12] !=0)
s.add(mem[1] - mem[33] !=0)
s.add(mem[9] - mem[12] !=0)
s.add(mem[9] - mem[33] !=0)
s.add(mem[10] - mem[12] !=0)
s.add(mem[17] - mem[33] !=0)
s.add(mem[11] - mem[12] !=0)
s.add(mem[25] - mem[33] !=0)
s.add(mem[8] - mem[13] !=0)
s.add(mem[1] - mem[41] !=0)
s.add(mem[9] - mem[13] !=0)
s.add(mem[9] - mem[41] !=0)
s.add(mem[10] - mem[13] !=0)
s.add(mem[17] - mem[41] !=0)
s.add(mem[11] - mem[13] !=0)
s.add(mem[25] - mem[41] !=0)
s.add(mem[12] - mem[13] !=0)
s.add(mem[33] - mem[41] !=0)
s.add(mem[8] - mem[14] !=0)
s.add(mem[1] - mem[49] !=0)
s.add(mem[9] - mem[14] !=0)
s.add(mem[9] - mem[49] !=0)
s.add(mem[10] - mem[14] !=0)
s.add(mem[17] - mem[49] !=0)
s.add(mem[11] - mem[14] !=0)
s.add(mem[25] - mem[49] !=0)
s.add(mem[12] - mem[14] !=0)
s.add(mem[33] - mem[49] !=0)
s.add(mem[13] - mem[14] !=0)
s.add(mem[41] - mem[49] !=0)
s.add(mem[8] - mem[15] !=0)
s.add(mem[1] - mem[57] !=0)
s.add(mem[9] - mem[15] !=0)
s.add(mem[9] - mem[57] !=0)
s.add(mem[10] - mem[15] !=0)
s.add(mem[17] - mem[57] !=0)
s.add(mem[11] - mem[15] !=0)
s.add(mem[25] - mem[57] !=0)
s.add(mem[12] - mem[15] !=0)
s.add(mem[33] - mem[57] !=0)
s.add(mem[13] - mem[15] !=0)
s.add(mem[41] - mem[57] !=0)
s.add(mem[14] - mem[15] !=0)
s.add(mem[49] - mem[57] !=0)
s.add(mem[16] - mem[17] !=0)
s.add(mem[2] - mem[10] !=0)
s.add(mem[16] - mem[18] !=0)
s.add(mem[2] - mem[18] !=0)
s.add(mem[17] - mem[18] !=0)
s.add(mem[10] - mem[18] !=0)
s.add(mem[16] - mem[19] !=0)
s.add(mem[2] - mem[26] !=0)
s.add(mem[17] - mem[19] !=0)
s.add(mem[10] - mem[26] !=0)
s.add(mem[18] - mem[19] !=0)
s.add(mem[18] - mem[26] !=0)
s.add(mem[16] - mem[20] !=0)
s.add(mem[2] - mem[34] !=0)
s.add(mem[17] - mem[20] !=0)
s.add(mem[10] - mem[34] !=0)
s.add(mem[18] - mem[20] !=0)
s.add(mem[18] - mem[34] !=0)
s.add(mem[19] - mem[20] !=0)
s.add(mem[26] - mem[34] !=0)
s.add(mem[16] - mem[21] !=0)
s.add(mem[2] - mem[42] !=0)
s.add(mem[17] - mem[21] !=0)
s.add(mem[10] - mem[42] !=0)
s.add(mem[18] - mem[21] !=0)
s.add(mem[18] - mem[42] !=0)
s.add(mem[19] - mem[21] !=0)
s.add(mem[26] - mem[42] !=0)
s.add(mem[20] - mem[21] !=0)
s.add(mem[34] - mem[42] !=0)
s.add(mem[16] - mem[22] !=0)
s.add(mem[2] - mem[50] !=0)
s.add(mem[17] - mem[22] !=0)
s.add(mem[10] - mem[50] !=0)
s.add(mem[18] - mem[22] !=0)
s.add(mem[18] - mem[50] !=0)
s.add(mem[19] - mem[22] !=0)
s.add(mem[26] - mem[50] !=0)
s.add(mem[20] - mem[22] !=0)
s.add(mem[34] - mem[50] !=0)
s.add(mem[21] - mem[22] !=0)
s.add(mem[42] - mem[50] !=0)
s.add(mem[16] - mem[23] !=0)
s.add(mem[2] - mem[58] !=0)
s.add(mem[17] - mem[23] !=0)
s.add(mem[10] - mem[58] !=0)
s.add(mem[18] - mem[23] !=0)
s.add(mem[18] - mem[58] !=0)
s.add(mem[19] - mem[23] !=0)
s.add(mem[26] - mem[58] !=0)
s.add(mem[20] - mem[23] !=0)
s.add(mem[34] - mem[58] !=0)
s.add(mem[21] - mem[23] !=0)
s.add(mem[42] - mem[58] !=0)
s.add(mem[22] - mem[23] !=0)
s.add(mem[50] - mem[58] !=0)
s.add(mem[24] - mem[25] !=0)
s.add(mem[3] - mem[11] !=0)
s.add(mem[24] - mem[26] !=0)
s.add(mem[3] - mem[19] !=0)
s.add(mem[25] - mem[26] !=0)
s.add(mem[11] - mem[19] !=0)
s.add(mem[24] - mem[27] !=0)
s.add(mem[3] - mem[27] !=0)
s.add(mem[25] - mem[27] !=0)
s.add(mem[11] - mem[27] !=0)
s.add(mem[26] - mem[27] !=0)
s.add(mem[19] - mem[27] !=0)
s.add(mem[24] - mem[28] !=0)
s.add(mem[3] - mem[35] !=0)
s.add(mem[25] - mem[28] !=0)
s.add(mem[11] - mem[35] !=0)
s.add(mem[26] - mem[28] !=0)
s.add(mem[19] - mem[35] !=0)
s.add(mem[27] - mem[28] !=0)
s.add(mem[27] - mem[35] !=0)
s.add(mem[24] - mem[29] !=0)
s.add(mem[3] - mem[43] !=0)
s.add(mem[25] - mem[29] !=0)
s.add(mem[11] - mem[43] !=0)
s.add(mem[26] - mem[29] !=0)
s.add(mem[19] - mem[43] !=0)
s.add(mem[27] - mem[29] !=0)
s.add(mem[27] - mem[43] !=0)
s.add(mem[28] - mem[29] !=0)
s.add(mem[35] - mem[43] !=0)
s.add(mem[24] - mem[30] !=0)
s.add(mem[3] - mem[51] !=0)
s.add(mem[25] - mem[30] !=0)
s.add(mem[11] - mem[51] !=0)
s.add(mem[26] - mem[30] !=0)
s.add(mem[19] - mem[51] !=0)
s.add(mem[27] - mem[30] !=0)
s.add(mem[27] - mem[51] !=0)
s.add(mem[28] - mem[30] !=0)
s.add(mem[35] - mem[51] !=0)
s.add(mem[29] - mem[30] !=0)
s.add(mem[43] - mem[51] !=0)
s.add(mem[24] - mem[31] !=0)
s.add(mem[3] - mem[59] !=0)
s.add(mem[25] - mem[31] !=0)
s.add(mem[11] - mem[59] !=0)
s.add(mem[26] - mem[31] !=0)
s.add(mem[19] - mem[59] !=0)
s.add(mem[27] - mem[31] !=0)
s.add(mem[27] - mem[59] !=0)
s.add(mem[28] - mem[31] !=0)
s.add(mem[35] - mem[59] !=0)
s.add(mem[29] - mem[31] !=0)
s.add(mem[43] - mem[59] !=0)
s.add(mem[30] - mem[31] !=0)
s.add(mem[51] - mem[59] !=0)
s.add(mem[32] - mem[33] !=0)
s.add(mem[4] - mem[12] !=0)
s.add(mem[32] - mem[34] !=0)
s.add(mem[4] - mem[20] !=0)
s.add(mem[33] - mem[34] !=0)
s.add(mem[12] - mem[20] !=0)
s.add(mem[32] - mem[35] !=0)
s.add(mem[4] - mem[28] !=0)
s.add(mem[33] - mem[35] !=0)
s.add(mem[12] - mem[28] !=0)
s.add(mem[34] - mem[35] !=0)
s.add(mem[20] - mem[28] !=0)
s.add(mem[32] - mem[36] !=0)
s.add(mem[4] - mem[36] !=0)
s.add(mem[33] - mem[36] !=0)
s.add(mem[12] - mem[36] !=0)
s.add(mem[34] - mem[36] !=0)
s.add(mem[20] - mem[36] !=0)
s.add(mem[35] - mem[36] !=0)
s.add(mem[28] - mem[36] !=0)
s.add(mem[32] - mem[37] !=0)
s.add(mem[4] - mem[44] !=0)
s.add(mem[33] - mem[37] !=0)
s.add(mem[12] - mem[44] !=0)
s.add(mem[34] - mem[37] !=0)
s.add(mem[20] - mem[44] !=0)
s.add(mem[35] - mem[37] !=0)
s.add(mem[28] - mem[44] !=0)
s.add(mem[36] - mem[37] !=0)
s.add(mem[36] - mem[44] !=0)
s.add(mem[32] - mem[38] !=0)
s.add(mem[4] - mem[52] !=0)
s.add(mem[33] - mem[38] !=0)
s.add(mem[12] - mem[52] !=0)
s.add(mem[34] - mem[38] !=0)
s.add(mem[20] - mem[52] !=0)
s.add(mem[35] - mem[38] !=0)
s.add(mem[28] - mem[52] !=0)
s.add(mem[36] - mem[38] !=0)
s.add(mem[36] - mem[52] !=0)
s.add(mem[37] - mem[38] !=0)
s.add(mem[44] - mem[52] !=0)
s.add(mem[32] - mem[39] !=0)
s.add(mem[4] - mem[60] !=0)
s.add(mem[33] - mem[39] !=0)
s.add(mem[12] - mem[60] !=0)
s.add(mem[34] - mem[39] !=0)
s.add(mem[20] - mem[60] !=0)
s.add(mem[35] - mem[39] !=0)
s.add(mem[28] - mem[60] !=0)
s.add(mem[36] - mem[39] !=0)
s.add(mem[36] - mem[60] !=0)
s.add(mem[37] - mem[39] !=0)
s.add(mem[44] - mem[60] !=0)
s.add(mem[38] - mem[39] !=0)
s.add(mem[52] - mem[60] !=0)
s.add(mem[40] - mem[41] !=0)
s.add(mem[5] - mem[13] !=0)
s.add(mem[40] - mem[42] !=0)
s.add(mem[5] - mem[21] !=0)
s.add(mem[41] - mem[42] !=0)
s.add(mem[13] - mem[21] !=0)
s.add(mem[40] - mem[43] !=0)
s.add(mem[5] - mem[29] !=0)
s.add(mem[41] - mem[43] !=0)
s.add(mem[13] - mem[29] !=0)
s.add(mem[42] - mem[43] !=0)
s.add(mem[21] - mem[29] !=0)
s.add(mem[40] - mem[44] !=0)
s.add(mem[5] - mem[37] !=0)
s.add(mem[41] - mem[44] !=0)
s.add(mem[13] - mem[37] !=0)
s.add(mem[42] - mem[44] !=0)
s.add(mem[21] - mem[37] !=0)
s.add(mem[43] - mem[44] !=0)
s.add(mem[29] - mem[37] !=0)
s.add(mem[40] - mem[45] !=0)
s.add(mem[5] - mem[45] !=0)
s.add(mem[41] - mem[45] !=0)
s.add(mem[13] - mem[45] !=0)
s.add(mem[42] - mem[45] !=0)
s.add(mem[21] - mem[45] !=0)
s.add(mem[43] - mem[45] !=0)
s.add(mem[29] - mem[45] !=0)
s.add(mem[44] - mem[45] !=0)
s.add(mem[37] - mem[45] !=0)
s.add(mem[40] - mem[46] !=0)
s.add(mem[5] - mem[53] !=0)
s.add(mem[41] - mem[46] !=0)
s.add(mem[13] - mem[53] !=0)
s.add(mem[42] - mem[46] !=0)
s.add(mem[21] - mem[53] !=0)
s.add(mem[43] - mem[46] !=0)
s.add(mem[29] - mem[53] !=0)
s.add(mem[44] - mem[46] !=0)
s.add(mem[37] - mem[53] !=0)
s.add(mem[45] - mem[46] !=0)
s.add(mem[45] - mem[53] !=0)
s.add(mem[40] - mem[47] !=0)
s.add(mem[5] - mem[61] !=0)
s.add(mem[41] - mem[47] !=0)
s.add(mem[13] - mem[61] !=0)
s.add(mem[42] - mem[47] !=0)
s.add(mem[21] - mem[61] !=0)
s.add(mem[43] - mem[47] !=0)
s.add(mem[29] - mem[61] !=0)
s.add(mem[44] - mem[47] !=0)
s.add(mem[37] - mem[61] !=0)
s.add(mem[45] - mem[47] !=0)
s.add(mem[45] - mem[61] !=0)
s.add(mem[46] - mem[47] !=0)
s.add(mem[53] - mem[61] !=0)
s.add(mem[48] - mem[49] !=0)
s.add(mem[6] - mem[14] !=0)
s.add(mem[48] - mem[50] !=0)
s.add(mem[6] - mem[22] !=0)
s.add(mem[49] - mem[50] !=0)
s.add(mem[14] - mem[22] !=0)
s.add(mem[48] - mem[51] !=0)
s.add(mem[6] - mem[30] !=0)
s.add(mem[49] - mem[51] !=0)
s.add(mem[14] - mem[30] !=0)
s.add(mem[50] - mem[51] !=0)
s.add(mem[22] - mem[30] !=0)
s.add(mem[48] - mem[52] !=0)
s.add(mem[6] - mem[38] !=0)
s.add(mem[49] - mem[52] !=0)
s.add(mem[14] - mem[38] !=0)
s.add(mem[50] - mem[52] !=0)
s.add(mem[22] - mem[38] !=0)
s.add(mem[51] - mem[52] !=0)
s.add(mem[30] - mem[38] !=0)
s.add(mem[48] - mem[53] !=0)
s.add(mem[6] - mem[46] !=0)
s.add(mem[49] - mem[53] !=0)
s.add(mem[14] - mem[46] !=0)
s.add(mem[50] - mem[53] !=0)
s.add(mem[22] - mem[46] !=0)
s.add(mem[51] - mem[53] !=0)
s.add(mem[30] - mem[46] !=0)
s.add(mem[52] - mem[53] !=0)
s.add(mem[38] - mem[46] !=0)
s.add(mem[48] - mem[54] !=0)
s.add(mem[6] - mem[54] !=0)
s.add(mem[49] - mem[54] !=0)
s.add(mem[14] - mem[54] !=0)
s.add(mem[50] - mem[54] !=0)
s.add(mem[22] - mem[54] !=0)
s.add(mem[51] - mem[54] !=0)
s.add(mem[30] - mem[54] !=0)
s.add(mem[52] - mem[54] !=0)
s.add(mem[38] - mem[54] !=0)
s.add(mem[53] - mem[54] !=0)
s.add(mem[46] - mem[54] !=0)
s.add(mem[48] - mem[55] !=0)
s.add(mem[6] - mem[62] !=0)
s.add(mem[49] - mem[55] !=0)
s.add(mem[14] - mem[62] !=0)
s.add(mem[50] - mem[55] !=0)
s.add(mem[22] - mem[62] !=0)
s.add(mem[51] - mem[55] !=0)
s.add(mem[30] - mem[62] !=0)
s.add(mem[52] - mem[55] !=0)
s.add(mem[38] - mem[62] !=0)
s.add(mem[53] - mem[55] !=0)
s.add(mem[46] - mem[62] !=0)
s.add(mem[54] - mem[55] !=0)
s.add(mem[54] - mem[62] !=0)
s.add(mem[56] - mem[57] !=0)
s.add(mem[7] - mem[15] !=0)
s.add(mem[56] - mem[58] !=0)
s.add(mem[7] - mem[23] !=0)
s.add(mem[57] - mem[58] !=0)
s.add(mem[15] - mem[23] !=0)
s.add(mem[56] - mem[59] !=0)
s.add(mem[7] - mem[31] !=0)
s.add(mem[57] - mem[59] !=0)
s.add(mem[15] - mem[31] !=0)
s.add(mem[58] - mem[59] !=0)
s.add(mem[23] - mem[31] !=0)
s.add(mem[56] - mem[60] !=0)
s.add(mem[7] - mem[39] !=0)
s.add(mem[57] - mem[60] !=0)
s.add(mem[15] - mem[39] !=0)
s.add(mem[58] - mem[60] !=0)
s.add(mem[23] - mem[39] !=0)
s.add(mem[59] - mem[60] !=0)
s.add(mem[31] - mem[39] !=0)
s.add(mem[56] - mem[61] !=0)
s.add(mem[7] - mem[47] !=0)
s.add(mem[57] - mem[61] !=0)
s.add(mem[15] - mem[47] !=0)
s.add(mem[58] - mem[61] !=0)
s.add(mem[23] - mem[47] !=0)
s.add(mem[59] - mem[61] !=0)
s.add(mem[31] - mem[47] !=0)
s.add(mem[60] - mem[61] !=0)
s.add(mem[39] - mem[47] !=0)
s.add(mem[56] - mem[62] !=0)
s.add(mem[7] - mem[55] !=0)
s.add(mem[57] - mem[62] !=0)
s.add(mem[15] - mem[55] !=0)
s.add(mem[58] - mem[62] !=0)
s.add(mem[23] - mem[55] !=0)
s.add(mem[59] - mem[62] !=0)
s.add(mem[31] - mem[55] !=0)
s.add(mem[60] - mem[62] !=0)
s.add(mem[39] - mem[55] !=0)
s.add(mem[61] - mem[62] !=0)
s.add(mem[47] - mem[55] !=0)
s.add(mem[56] - mem[63] !=0)
s.add(mem[7] - mem[63] !=0)
s.add(mem[57] - mem[63] !=0)
s.add(mem[15] - mem[63] !=0)
s.add(mem[58] - mem[63] !=0)
s.add(mem[23] - mem[63] !=0)
s.add(mem[59] - mem[63] !=0)
s.add(mem[31] - mem[63] !=0)
s.add(mem[60] - mem[63] !=0)
s.add(mem[39] - mem[63] !=0)
s.add(mem[61] - mem[63] !=0)
s.add(mem[47] - mem[63] !=0)
s.add(mem[62] - mem[63] !=0)
s.add(mem[55] - mem[63] !=0)

s.add((Int2BV(If((mem[8]-mem[0]==0), 0xffff, 1),32) * (mem[8]-mem[0])) -2 ==0)
s.add( ((((mem[10] * mem[9])%0x7fff)* mem[1])%0x7fff) -8 ==0 )
s.add(mem[2] + mem[3] -12 ==0)
s.add(mem[6] + mem[5] + mem[4] -17 ==0)

#a=(mem[15] * mem[23]) %0x7fff
#b= ((a * mem[7]) %0x7fff)-15
#s.add(b==0)
s.add(((((mem[15] * mem[23]) %0x7fff) * mem[7])%0x7fff) -15 ==0)


s.add(mem[11] - 7 ==0)
s.add(mem[20] + mem[28] +mem[12] -7==0)

s.add(mem[13] - 8 ==0)
s.add(mem[14] + mem[22] -12 ==0)
s.add((Int2BV(If(mem[17] - mem[16]==0, 0xffff, 1), 32)* (mem[17] - mem[16])) - 2 ==0)

#a= (mem[26] * mem[27]) %0x7fff
#b=(mem[18] * a) %0x7fff
#c=b- 144
#s.add(c==0)
s.add(((((mem[26] * mem[27]) %0x7fff) * mem[18])%0x7fff) -144 ==0)

s.add(mem[19] -1 ==0)
s.add((Int2BV(If(mem[29] - mem[21] ==0, 0xffff, 1),32) * (mem[29] - mem[21])) -5 ==0)
s.add(mem[24] - 5 ==0)
s.add(mem[25] - 3 ==0)
s.add((mem[38] % mem[30]) * (mem[38] % mem[30]) ==0)

#a= mem[30] / mem[38]
#b= a + (mem[38] / mem[30])
#c= b / (1+ Int2BV(If(mem[38] == mem[30], 1 ,0), 32))
#s.add(c-2==0)
s.add((((mem[30] / mem[38]) + (mem[38] / mem[30])) / (1+ Int2BV(If(mem[38] == mem[30], 1 ,0), 32))) -2==0 )

#a= mem[31] % mem[39]
#b= a * (mem[39] % mem[31])
s.add((mem[31] % mem[39]) * (mem[39] % mem[31]) ==0)

#a= mem[31] / mem[39]
#b= a + (mem[39] / mem[31])
#c=b /  (1+ Int2BV(If(mem[31] == mem[39], 1, 0),32))
#s.add(c -3 ==0)
s.add((((mem[31] / mem[39]) + (mem[39] / mem[31])) / (1+ Int2BV(If(mem[31] == mem[39], 1 ,0), 32))) -3==0 )


s.add(mem[32] - 1 ==0)
s.add(mem[41] + mem[33] -12 ==0)
s.add(mem[34] - 4 ==0)

#a=(mem[37] * mem[45] )% 0x7fff
#b= (mem[36] * a) %0x7fff
#c=(b * mem[35]) %0x7fff
#d= c- 30
#s.add(d==0)
s.add(((((((mem[37] * mem[45]) %0x7fff) * mem[36])%0x7fff) *mem[35])&0x7fff) -144 ==0)

s.add(mem[40]- 7==0)
s.add((mem[42] % mem[50]) * (mem[50] % mem[42])==0)

#a= mem[42] / mem[50]
#b= a + (mem[50] / mem[42])
#c=b /  (1+ Int2BV(If(mem[42] == mem[50], 1, 0), 32))
#s.add(c -3 ==0)
s.add((((mem[42] / mem[50]) + (mem[50] / mem[42])) / (1+ Int2BV(If(mem[42] == mem[50], 1 ,0), 32))) -3==0 )


s.add(mem[59] + mem[51] + mem[43] -15 ==0)
s.add(mem[44] -3 ==0)
s.add((mem[46] % mem[54]) * (mem[54] % mem[46])==0)

#a= mem[46] / mem[54]
#b= a + (mem[54] / mem[46])
#c=b /  (1+ Int2BV(If(mem[46] == mem[54], 1, 0), 32))
#s.add(c -3 ==0)
s.add((((mem[46] / mem[54]) + (mem[54] / mem[46])) / (1+ Int2BV(If(mem[46] == mem[54], 1 ,0), 32))) -3==0 )

s.add((mem[47] % mem[55]) * (mem[55] % mem[47])==0)

#a= mem[47] / mem[55]
#b= a + (mem[55] / mem[47])
#c=b /  (1+ Int2BV(If(mem[47] == mem[55], 1, 0), 32))
#s.add(c -2 ==0)
s.add((((mem[47] / mem[55]) + (mem[55] / mem[47])) / (1+ Int2BV(If(mem[47] == mem[55], 1 ,0), 32))) -2==0 )

s.add(mem[48] + mem[49] + mem[57] -12 ==0)

s.add(((mem[53]-mem[52]) * Int2BV(If(mem[53]-mem[52]==0, 0xffff ,1),32)) -2 ==0)

s.add(mem[56] - 2==0)
s.add(mem[58]-5==0)

s.add(((mem[61]-mem[60]) * Int2BV(If(mem[61]-mem[60]==0, 0xffff ,1),32)) -2 ==0)

s.add((mem[63] % mem[62]) * (mem[62] % mem[63])==0)

#a= mem[63] / mem[62]
#b= a + (mem[62] / mem[63])
#c=b /  (1+ Int2BV(If(mem[63] == mem[62], 1, 0), 32))
#s.add(c -7 ==0)
s.add((((mem[63] / mem[62]) + (mem[62] / mem[63])) / (1+ Int2BV(If(mem[63] == mem[62], 1 ,0), 32))) -2==0 )

print(s.check())
flag=""
m=s.model()
for i in mem:
    flag+=chr(m[i].as_long() + 0x2f)
print(flag)
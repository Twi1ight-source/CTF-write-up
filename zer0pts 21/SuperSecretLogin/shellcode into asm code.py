from unicorn import Uc, UC_ARCH_X86, UC_MODE_32, UcError
# for accessing the RAX and RDI registers
from unicorn.x86_const import *
# We need to disassemble x86_64 code
from capstone import Cs, CS_ARCH_X86, CS_MODE_32, CsError

X86_MACHINE_CODE = b"\x55\x89\xe5\x60\x31\xc0\x81\xec\x00\x01\x00\x00\x88\x04\x04\x40\x3d\x00\x01\x00\x00\x75\xf5\x31\xf6\x31\xdb\x0f\xb6\x04\x34\x01\xc3\x89\xf0\xb9\x2b\x00\x00\x00\x31\xd2\xf7\xf1\x8b\x45\x14\x0f\xbe\x0c\x10\x01\xcb\x0f\xb6\xdb\x8a\x0c\x34\x8a\x04\x1c\x88\x04\x34\x88\x0c\x1c\x83\xc6\x01\x81\xfe\x00\x01\x00\x00\x75\xcc\x31\xf6\x31\xd2\x31\xc9\x42\x46\x0f\xb6\xd2\x8a\x04\x14\x01\xc1\x0f\xb6\xc9\x8a\x1c\x0c\x88\x04\x0c\x88\x1c\x14\x00\xd8\x0f\xb6\xc0\x8b\x7d\x0c\x8a\x5c\x37\xff\x8a\x04\x04\x31\xc3\x8b\x7d\x08\xe8\x10\x00\x00\x00\x3b\x75\x10\x75\xcc\x81\xc4\x00\x01\x00\x00\x61\xc9\xc2\x10\x00\x50\x53\xeb\x18\x58\xc1\xeb\x04\x8a\x1c\x18\x88\x5c\x77\xfe\x5b\x83\xe3\x0f\x8a\x1c\x18\x88\x5c\x77\xff\x58\xc3\xe8\xe3\xff\xff\xff\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x61\x62\x63\x64\x65\x66"
# memory address where emulation starts
ADDRESS = 0x1000000
try:
      # Initialize the disassembler in x86 mode
      md = Cs(CS_ARCH_X86, CS_MODE_32)
      # iterate over each instruction and print it
      for instruction in md.disasm(X86_MACHINE_CODE, 0x1000):
            print("0x%x:\t%s\t%s" % (instruction.address, instruction.mnemonic, instruction.op_str))
except CsError as e:
      print("Capstone Error: %s" % e)
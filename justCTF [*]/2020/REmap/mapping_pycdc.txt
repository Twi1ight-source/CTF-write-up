a='''1   POP_TOP
2   ROT_TWO
3   ROT_THREE
4   DUP_TOP
5   DUP_TOP_TWO
6   ROT_FOUR
9   NOP
10  UNARY_POSITIVE
11  UNARY_NEGATIVE
12  UNARY_NOT
15  UNARY_INVERT
16  BINARY_MATRIX_MULTIPLY
17  INPLACE_MATRIX_MULTIPLY
19  BINARY_POWER
20  BINARY_MULTIPLY
22  BINARY_MODULO
23  BINARY_ADD
24  BINARY_SUBTRACT
25  BINARY_SUBSCR
26  BINARY_FLOOR_DIVIDE
27  BINARY_TRUE_DIVIDE
28  INPLACE_FLOOR_DIVIDE
29  INPLACE_TRUE_DIVIDE
50  GET_AITER
51  GET_ANEXT
52  BEFORE_ASYNC_WITH
53  BEGIN_FINALLY
54  END_ASYNC_FOR
55  INPLACE_ADD
56  INPLACE_SUBTRACT
57  INPLACE_MULTIPLY
59  INPLACE_MODULO
60  STORE_SUBSCR
61  DELETE_SUBSCR
62  BINARY_LSHIFT
63  BINARY_RSHIFT
64  BINARY_AND
65  BINARY_XOR
66  BINARY_OR
67  INPLACE_POWER
68  GET_ITER
69  GET_YIELD_FROM_ITER
70  PRINT_EXPR
71  LOAD_BUILD_CLASS
72  YIELD_FROM
73  GET_AWAITABLE
75  INPLACE_LSHIFT
76  INPLACE_RSHIFT
77  INPLACE_AND
78  INPLACE_XOR
79  INPLACE_OR
81  WITH_CLEANUP_START
82  WITH_CLEANUP_FINISH
83  RETURN_VALUE
84  IMPORT_STAR
85  SETUP_ANNOTATIONS
86  YIELD_VALUE
87  POP_BLOCK
88  END_FINALLY
89  POP_EXCEPT
90  STORE_NAME_A
91  DELETE_NAME_A
92  UNPACK_SEQUENCE_A
93  FOR_ITER_A
94  UNPACK_EX_A
95  STORE_ATTR_A
96  DELETE_ATTR_A
97  STORE_GLOBAL_A
98  DELETE_GLOBAL_A
100 LOAD_CONST_A
101 LOAD_NAME_A
102 BUILD_TUPLE_A
103 BUILD_LIST_A
104 BUILD_SET_A
105 BUILD_MAP_A
106 LOAD_ATTR_A
107 COMPARE_OP_A
108 IMPORT_NAME_A
109 IMPORT_FROM_A
110 JUMP_FORWARD_A
111 JUMP_IF_FALSE_OR_POP_A
112 JUMP_IF_TRUE_OR_POP_A
113 JUMP_ABSOLUTE_A
114 POP_JUMP_IF_FALSE_A
115 POP_JUMP_IF_TRUE_A
116 LOAD_GLOBAL_A
122 SETUP_FINALLY_A
124 LOAD_FAST_A
125 STORE_FAST_A
126 DELETE_FAST_A
130 RAISE_VARARGS_A
131 CALL_FUNCTION_A
132 MAKE_FUNCTION_A
133 BUILD_SLICE_A
135 LOAD_CLOSURE_A
136 LOAD_DEREF_A
137 STORE_DEREF_A
138 DELETE_DEREF_A
141 CALL_FUNCTION_KW_A
142 CALL_FUNCTION_EX_A
143 SETUP_WITH_A
144 EXTENDED_ARG_A
145 LIST_APPEND_A
146 SET_ADD_A
147 MAP_ADD_A
148 LOAD_CLASSDEREF_A
149 BUILD_LIST_UNPACK_A
150 BUILD_MAP_UNPACK_A
151 BUILD_MAP_UNPACK_WITH_CALL_A
152 BUILD_TUPLE_UNPACK_A
153 BUILD_SET_UNPACK_A
154 SETUP_ASYNC_WITH_A
155 FORMAT_VALUE_A
156 BUILD_CONST_KEY_MAP_A
157 BUILD_STRING_A
158 BUILD_TUPLE_UNPACK_WITH_CALL_A
160 LOAD_METHOD_A
161 CALL_METHOD_A
162 CALL_FINALLY_A
163 POP_FINALLY_A'''
dic={}
a=a.split('\n')
for i in range(len(a)):
    if i<=68:
        l,r=a[i].split('  ')
        dic[int(l)]=r
    else:
        l,r=a[i].split(' ')
        dic[int(l)]=r
print(dic)




mapping={64: 1, 9: 2, 71: 3, 60: 4, 54: 5, 56: 6, 52: 9, 26: 10, 78: 11, 27: 12, 81: 15, 70: 16, 88: 17, 12: 19, 4: 20, 68: 22, 29: 23, 11: 24, 17: 25, 67: 26, 84: 27, 86: 28, 23: 29, 76: 50, 82: 51, 19: 52, 10: 53, 59: 54, 50: 55, 65: 56, 79: 57, 6: 59, 3: 60, 28: 61, 25: 62, 16: 63, 62: 64, 85: 65, 75: 66, 73: 67, 72: 68, 83: 69, 22: 70, 2: 71, 73: 72, 5: 73, 1: 75, 53: 76, 20: 77, 63: 78, 57: 79, 66: 81, 55: 82, 89: 83, 15: 84, 24: 85, 61: 86, 77: 87, 51: 88, 69: 89, 125: 90, 136: 91, 106: 92, 98: 93, 144: 94, 126: 95, 95: 96, 156: 97, 110: 98, 97: 100, 155: 101, 91: 102, 154: 103, 153: 104, 133: 105, 132: 106, 115: 107, 108: 108, 94: 109, 102: 110, 158: 111, 103: 112, 150: 113, 130: 114, 131: 115, 113: 116, 93: 122, 141: 124, 137: 125, 114: 126, 111: 130, 122: 131, 96: 132, 124: 133, 161: 135, 147: 136, 142: 137, 112: 138, 107: 141, 138: 142, 145: 143, 116: 145, 151: 146, 152: 147, 146: 148, 109: 144, 101: 149, 157: 150, 92: 151, 148: 152, 104: 153, 160: 154, 149: 155, 105: 156, 100: 157, 143: 158, 90: 160, 135: 161, 163: 162, 162: 163}

origin={1: 'POP_TOP', 2: 'ROT_TWO', 3: 'ROT_THREE', 4: 'DUP_TOP', 5: 'DUP_TOP_TWO', 6: 'ROT_FOUR', 9: 'NOP', 10: 'UNARY_POSITIVE', 11: 'UNARY_NEGATIVE', 12: 'UNARY_NOT', 15: 'UNARY_INVERT', 16: 'BINARY_MATRIX_MULTIPLY', 17: 'INPLACE_MATRIX_MULTIPLY', 19: 'BINARY_POWER', 20: 'BINARY_MULTIPLY', 22: 'BINARY_MODULO', 23: 'BINARY_ADD', 24: 'BINARY_SUBTRACT', 25: 'BINARY_SUBSCR', 26: 'BINARY_FLOOR_DIVIDE', 27: 'BINARY_TRUE_DIVIDE', 28: 'INPLACE_FLOOR_DIVIDE', 29: 'INPLACE_TRUE_DIVIDE', 50: 'GET_AITER', 51: 'GET_ANEXT', 52: 'BEFORE_ASYNC_WITH', 53: 'BEGIN_FINALLY', 54: 'END_ASYNC_FOR', 55: 
'INPLACE_ADD', 56: 'INPLACE_SUBTRACT', 57: 'INPLACE_MULTIPLY', 59: 'INPLACE_MODULO', 60: 'STORE_SUBSCR', 61: 'DELETE_SUBSCR', 62: 'BINARY_LSHIFT', 63: 'BINARY_RSHIFT', 64: 'BINARY_AND', 65: 'BINARY_XOR', 66: 'BINARY_OR', 67: 'INPLACE_POWER', 68: 'GET_ITER', 69: 'GET_YIELD_FROM_ITER', 70: 'PRINT_EXPR', 71: 'LOAD_BUILD_CLASS', 72: 'YIELD_FROM', 73: 'GET_AWAITABLE', 75: 'INPLACE_LSHIFT', 76: 'INPLACE_RSHIFT', 77: 'INPLACE_AND', 78: 'INPLACE_XOR', 79: 'INPLACE_OR', 81: 'WITH_CLEANUP_START', 82: 'WITH_CLEANUP_FINISH', 83: 'RETURN_VALUE', 84: 'IMPORT_STAR', 85: 'SETUP_ANNOTATIONS', 86: 'YIELD_VALUE', 87: 'POP_BLOCK', 88: 'END_FINALLY', 89: 'POP_EXCEPT', 90: 'STORE_NAME_A', 91: 'DELETE_NAME_A', 92: 'UNPACK_SEQUENCE_A', 93: 'FOR_ITER_A', 94: 'UNPACK_EX_A', 95: 'STORE_ATTR_A', 96: 'DELETE_ATTR_A', 97: 'STORE_GLOBAL_A', 98: 
'DELETE_GLOBAL_A', 100: 'LOAD_CONST_A', 101: 'LOAD_NAME_A', 102: 'BUILD_TUPLE_A', 103: 'BUILD_LIST_A', 104: 'BUILD_SET_A', 105: 'BUILD_MAP_A', 106: 'LOAD_ATTR_A', 107: 'COMPARE_OP_A', 108: 'IMPORT_NAME_A', 109: 'IMPORT_FROM_A', 110: 'JUMP_FORWARD_A', 111: 'JUMP_IF_FALSE_OR_POP_A', 112: 'JUMP_IF_TRUE_OR_POP_A', 113: 'JUMP_ABSOLUTE_A', 114: 'POP_JUMP_IF_FALSE_A', 115: 'POP_JUMP_IF_TRUE_A', 116: 'LOAD_GLOBAL_A', 122: 'SETUP_FINALLY_A', 124: 'LOAD_FAST_A', 125: 'STORE_FAST_A', 126: 'DELETE_FAST_A', 130: 'RAISE_VARARGS_A', 131: 'CALL_FUNCTION_A', 132: 'MAKE_FUNCTION_A', 133: 'BUILD_SLICE_A', 135: 'LOAD_CLOSURE_A', 136: 'LOAD_DEREF_A', 137: 'STORE_DEREF_A', 138: 'DELETE_DEREF_A', 141: 'CALL_FUNCTION_KW_A', 142: 'CALL_FUNCTION_EX_A', 143: 'SETUP_WITH_A', 144: 'EXTENDED_ARG_A', 145: 'LIST_APPEND_A', 146: 'SET_ADD_A', 147: 
'MAP_ADD_A', 148: 'LOAD_CLASSDEREF_A', 149: 'BUILD_LIST_UNPACK_A', 150: 'BUILD_MAP_UNPACK_A', 151: 'BUILD_MAP_UNPACK_WITH_CALL_A', 152: 'BUILD_TUPLE_UNPACK_A', 153: 'BUILD_SET_UNPACK_A', 154: 'SETUP_ASYNC_WITH_A', 155: 'FORMAT_VALUE_A', 156: 'BUILD_CONST_KEY_MAP_A', 157: 'BUILD_STRING_A', 158: 'BUILD_TUPLE_UNPACK_WITH_CALL_A', 160: 'LOAD_METHOD_A', 161: 'CALL_METHOD_A', 162: 'CALL_FINALLY_A', 163: 'POP_FINALLY_A'}

mapped={}
for i in mapping:
    if i<=9:
        print(f'{i}   {origin[mapping[i]]}', end='\n')
    elif i>9 and i<=98:
        print(f'{i}  {origin[mapping[i]]}', end='\n')
    else:
        print(f'{i} {origin[mapping[i]]}', end='\n')
    




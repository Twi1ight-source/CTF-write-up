from z3 import *
s=Solver()

enc_data=[0x36, 0x65, 0x31, 0xe3, 0xb6, 0xaa, 0x22, 0xae, 0x89, 0x7b, 0x8b, 0x7a, 0x21, 0xaf, 0xa7, 0x3a, 0x88, 0x3a, 0x0f, 0x7b, 0x8a, 0x6e, 0x8a, 0x2e, 0x0b, 0x7a, 0x88, 0xbb, 0xa3, 0x2e, 0x8f, 0x7b, 0x27, 0xfb, 0x0a, 0xbb, 0x89, 0x3b, 0x2b, 0x74, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37, 0x13, 0x37]

flag=[BitVec(f'flag{i}', 8) for i in range(len(enc_data))]
flag_1=[0] * len(enc_data)

s.add(flag[0]==ord("I"))
s.add(flag[1]==ord("J"))
s.add(flag[2]==ord("C"))
s.add(flag[3]==ord("T"))
s.add(flag[4]==ord("F"))
s.add(flag[5]==ord("{"))

for i in range(0,len(enc_data),2):
    a1=((flag[i]>>4) + (flag[i+1]<<4))&0xff
    a2=((flag[i+1]>>4) + (flag[i]<<4))&0xff
    
    a3=If(a1>=0, (2*a1)&0xff, ((2*a1)|1)&0xff)
    a4=If(a3>=0, (2*a3)&0xff, ((2*a3)|1)&0xff)
    a5=If(a4>=0, (2*a4)&0xff, ((2*a4)|1)&0xff)

    a6=If(a2>=0, (2*a2)&0xff, ((2*a2)|1)&0xff)
    a7=If(a6>=0, (2*a6)&0xff, ((2*a6)|1)&0xff)

    flag_1[i]=(a5 ^ 0x13)&0xff
    flag_1[i+1]=(a7 ^ 0x37)&0xff

for i in range(len(enc_data)):
    s.add(flag_1[i]==enc_data[i])

print(s.check())
if s.check() == sat:
    m=s.model()
    for c in flag:
        print(chr(m[c].as_long()), end="")